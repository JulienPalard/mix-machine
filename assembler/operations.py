# operations.py

# maps instruction to (C_CODE, F_CODE)
_instructions = {
  "NOP" :   (0, 0),
  "ADD" :   (1, 5),
  "SUB" :   (2, 5),
  "MUL" :   (3, 5),
  "DIV" :   (4, 5),
  "NUM" :   (5, 0),
  "CHAR" :  (5, 1),
  "HLT" :   (5, 2),
  "SLA" :   (6, 0),
  "SRA" :   (6, 1),
  "SLAX" :  (6, 2),
  "SRAX" :  (6, 3),
  "SLC" :   (6, 4),
  "SRC" :   (6, 5),
  "MOVE" :  (7, 1),
  "LDA" :   (8, 5),
  "LD1" :   (9, 5),
  "LD2" :   (10, 5),
  "LD3" :   (11, 5),
  "LD4" :   (12, 5),
  "LD5" :   (13, 5),
  "LD6" :   (14, 5),
  "LDX" :   (15, 5),
  "LDAN" :  (16, 5),
  "LD1N" :  (17, 5),
  "LD2N" :  (18, 5),
  "LD3N" :  (19, 5),
  "LD4N" :  (20, 5),
  "LD5N" :  (21, 5),
  "LD6N" :  (22, 5),
  "LDXN" :  (23, 5),
  "STA" :   (24, 5),
  "ST1" :   (25, 5),
  "ST2" :   (26, 5),
  "ST3" :   (27, 5),
  "ST4" :   (28, 5),
  "ST5" :   (29, 5),
  "ST6" :   (30, 5),
  "STX" :   (31, 5),
  "STJ" :   (32, 2),
  "STZ" :   (33, 5),
  "JBUS" :  (34, 0),
  "IOC" :   (35, 0),
  "IN" :    (36, 0),
  "OUT" :   (37, 0),
  "JRED" :  (38, 0),
  "JMP" :   (39, 0),
  "JSJ" :   (39, 1),
  "JOV" :   (39, 2),
  "JNOV" :  (39, 3),
  "JL" :    (39, 4),
  "JE" :    (39, 5),
  "JG" :    (39, 6),
  "JGE" :   (39, 7),
  "JNE" :   (39, 8),
  "JLE" :   (39, 9),
  "JAN" :   (40, 0),
  "JAZ" :   (40, 1),
  "JAP" :   (40, 2),
  "JANN" :  (40, 3),
  "JANZ" :  (40, 4),
  "JANP" :  (40, 5),
  "J1N" :   (41, 0),
  "J1Z" :   (41, 1),
  "J1P" :   (41, 2),
  "J1NN" :  (41, 3),
  "J1NZ" :  (41, 4),
  "J1NP" :  (41, 5),
  "J2N" :   (42, 0),
  "J2Z" :   (42, 1),
  "J2P" :   (42, 2),
  "J2NN" :  (42, 3),
  "J2NZ" :  (42, 4),
  "J2NP" :  (42, 5),
  "J3N" :   (43, 0),
  "J3Z" :   (43, 1),
  "J3P" :   (43, 2),
  "J3NN" :  (43, 3),
  "J3NZ" :  (43, 4),
  "J3NP" :  (43, 5),
  "J4N" :   (44, 0),
  "J4Z" :   (44, 1),
  "J4P" :   (44, 2),
  "J4NN" :  (44, 3),
  "J4NZ" :  (44, 4),
  "J4NP" :  (44, 5),
  "J5N" :   (45, 0),
  "J5Z" :   (45, 1),
  "J5P" :   (45, 2),
  "J5NN" :  (45, 3),
  "J5NZ" :  (45, 4),
  "J5NP" :  (45, 5),
  "J6N" :   (46, 0),
  "J6Z" :   (46, 1),
  "J6P" :   (46, 2),
  "J6NN" :  (46, 3),
  "J6NZ" :  (46, 4),
  "J6NP" :  (46, 5),
  "JXN" :   (47, 0),
  "JXZ" :   (47, 1),
  "JXP" :   (47, 2),
  "JXNN" :  (47, 3),
  "JXNZ" :  (47, 4),
  "JXNP" :  (47, 5),
  "INCA" :  (48, 0),
  "DECA" :  (48, 1),
  "ENTA" :  (48, 2),
  "ENNA" :  (48, 3),
  "INC1" :  (49, 0),
  "DEC1" :  (49, 1),
  "ENT1" :  (49, 2),
  "ENN1" :  (49, 3),
  "INC2" :  (50, 0),
  "DEC2" :  (50, 1),
  "ENT2" :  (50, 2),
  "ENN2" :  (50, 3),
  "INC3" :  (51, 0),
  "DEC3" :  (51, 1),
  "ENT3" :  (51, 2),
  "ENN3" :  (51, 3),
  "INC4" :  (52, 0),
  "DEC4" :  (52, 1),
  "ENT4" :  (52, 2),
  "ENN4" :  (52, 3),
  "INC5" :  (53, 0),
  "DEC5" :  (53, 1),
  "ENT5" :  (53, 2),
  "ENN5" :  (53, 3),
  "INC6" :  (54, 0),
  "DEC6" :  (54, 1),
  "ENT6" :  (54, 2),
  "ENN6" :  (54, 3),
  "INCX" :  (55, 0),
  "DECX" :  (55, 1),
  "ENTX" :  (55, 2),
  "ENNX" :  (55, 3),
  "CMPA" :  (56, 5),
  "CMP1" :  (57, 5),
  "CMP2" :  (58, 5),
  "CMP3" :  (59, 5),
  "CMP4" :  (60, 5),
  "CMP5" :  (61, 5),
  "CMP6" :  (62, 5),
  "CMPX" :  (63, 5)
}

_directives = ("EQU","ORIG","END","CON","ALF")

_valid_stuff = set(_instructions.keys()) | set(_directives)

def is_valid_operation(operation):
  return operation.upper() in _valid_stuff

def is_instruction(operation):
  return operation.upper() in _instructions

def get_codes(instr):
  try:  
    return _instructions[instr]
  except:
    return (None, None)
